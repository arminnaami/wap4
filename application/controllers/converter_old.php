<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');
ignore_user_abort(true);
set_time_limit(0);
setlocale(LC_ALL, 'en_US.UTF8');
//error_reporting(E_ALL);
//ini_set('display_errors', 1);
class Converter extends CI_Controller
{
    
    /**
     * Array of errors
     * @var array
     */
    var $aError;
    
    /**
     * sanitized video title without extension
     * @var string
     */
    public $title;
    
    /**
     * Unique ID for converter generated by uniqid();
     * @var string 
     */
    public $uniqid;
    
    /**
     * Extension of uploaded file
     * @var string 
     */
    public $extension;

    function __construct() 
    {
        parent::__construct();
        $this->load->helper('wap4');
        load_settings();
        $this->aError = array();
        $this->data["meta"] = "converter";
        
        $this->title = "";
        
        $this->_set_uniqid();
        
        $this->load->library('downloader');
        
/*
$this->load->library('downloader');
$this->downloader->sLink = 'http://www.youtube.com/watch?v=gA9lPZSkuDE';
$this->downloader->sUniqueId = 'bdfgtu452sbEr';
$bIsDownloaded = $this->downloader->download_file();
exit;
    */    
    }
   
   /**
    * Destructor to log errors
    */
   function __destruct() {
       if(!empty($this->aError)) {
           file_put_contents($this->config->item("ffmpeg_files_dir")."error_log",
                             implode(" ** ", $this->aError)." ** ".date("Y-m-d H:i:s")."\n", FILE_APPEND);
       }
   }
   
   private function _set_uniqid() {
       
        if($this->input->get_post('key') && ctype_alnum($this->input->get_post('key')) && strlen($this->input->get_post('key')) == 13)
            $this->uniqid = $this->input->get_post('key');
        elseif($this->uri->segment(4) && ctype_alnum($this->uri->segment(4)) && strlen($this->input->get_post('key')) == 13)
            $this->uniqid = $this->uri->segment(4);
        else
            $this->uniqid = uniqid();
   }
    
    /**
     * Shows converter interface
     */
    function index()
    {
        
	$this->data['message'] = '';
    	$this->data['users']   = '';
        $this->data['attr']    = array('id' => 'conv');
	$this->data['formats'] = $this->ffmpeg->ffmpeg_formats;
        $this->data['uniqid']  = $this->uniqid;
        $this->data['extensions'] = $this->config->item('ffmpeg_extensions');
        
	$this->datb['allowed'] = "'".implode("','", $this->config->item('ffmpeg_allowed'))."'";
        $this->datb['max']     = $this->data['max'];
        $this->datb['uniqid']  = $this->uniqid;
        

        $xmlUrl = $this->config->item("ffmpeg_files_dir")."presets.xml"; // XML feed file/URL
        $xmlStr = file_get_contents($xmlUrl);

        $xmlObj = simplexml_load_string($xmlStr);
        $arrXml = objectsIntoArray($xmlObj);

        array_sort($arrXml, 'category', SORT_DESC);

        $this->data['presets']    = $arrXml;
        
        
        $this->load->view('v2/includes/header', $this->data);
        
        if($_SERVER["SERVER_NAME"] == $this->config->item("mobile_host") || $_SERVER["SERVER_NAME"] == "testm.wap4.org")
        $this->load->view('v2/converter_no_js', $this->data);
        else
        $this->load->view('v2/converter', $this->data);
        
        $this->load->view('v2/includes/footer', $this->data);
    	
    }
   
    
    /**
     * Uploads video from Youtube
     */
    function upload_youtube()
    {
        $this->uniqid = isset($_POST["key"]) ? $_POST["key"] : $this->uri->segment(4);
        
        if(isset($_POST["youtube"]) && !empty($_POST["youtube"]))
            $link = $_POST["youtube"];
        else
            $link = base64_decode($this->uri->segment(5));
        
        $link = $this->normalize_link("youtube", $link);
        if($link === false) {
            echo lang('upload.fail');
            $this->write_fail_report("fail.normalize $link", $this->uniqid);
        }
        
        $title = $this->get_title($link, true);
        if($title === false) {
            echo lang('upload.fail');
            $this->write_fail_report("fail.title $link", $this->uniqid);
        }
        file_put_contents("/home/wap4/public_html/files/x", $link.PHP_EOL, FILE_APPEND);
        file_put_contents("/home/wap4/public_html/files/x", $title.PHP_EOL, FILE_APPEND);
        
        /**
         * Put video title in $this->uniqid.title
         */
        file_put_contents($this->config->item("ffmpeg_key_dir")."".$this->uniqid.".title", $title);
        
        /**
         * Get direct link to Youtube .flv file
         */
        
        /*$_flvUrl = $this->get_youtube_video($link);
        if($_flvUrl  === false) {
            echo lang('upload.fail');
            $this->write_fail_report("fail.getyoutube $link", $this->uniqid);
        }*/

        /**
         * Get youtube video length in bytes by HEAD request (found in stackoverflow)
         */
        
        /*$contentLength = $this->get_content_length($_flvUrl, "youtube");
        if($contentLength  === false) {
            echo lang('upload.fail');
            $this->write_fail_report("fail.length $_flvUrl", $this->uniqid);
        }*/
        
        /**
         * Put content length in $this->uniqid.length
         */
        //file_put_contents($this->config->item("ffmpeg_key_dir")."".$this->uniqid.".length", $contentLength);

         /**
         * Download youtube video and save
         */
        
        $saved_file = $title.".flv";
        
        /*if(!$this->download_link($_flvUrl, $saved_file)) {
            $this->aError[] = "Failed to download and save link: $_flvUrl";
            $this->write_fail_report("fail.download $_flvUrl", $this->uniqid);
        }*/

        chdir('files/uploaded');
        exec('/usr/local/bin/python2.5 /home/wap4/youtube-dl.py "'.$link.'"', $aOutput, $nReturnCode);
        file_put_contents("/home/wap4/public_html/files/x", implode("::",$aOutput).PHP_EOL, FILE_APPEND);
        
        $sCmd = '/usr/local/bin/python2.5 /home/wap4/youtube-dl.py --get-filename "'.$link.'"';
        exec($sCmd, $aFilenameOutput, $nReturnFilenameCode);
        
        
        rename($aFilenameOutput[0], $saved_file);
        
        if(is_file($this->config->item("ffmpeg_before_dir").$saved_file))
            echo lang('upload.done');
        else {
            $this->aError[] = "File $saved_file does not exist";
            echo lang('upload.fail')." File $saved_file does not exist";
            //$this->write_fail_report("fail.save $saved_file", $this->uniqid);
        }


    }
    
    /**
     * Get Youtube/Vimeo title from Youtube/Vimeo feed for ajax or mobile
     * @global string $title
     * @param string $link
     * @param boolean $return
     * @return boolean false if failure, string if title found 
     */
    function get_title($link = false, $return = false) {
        
        global $title;
        if(isset($_POST["youtube"])) {
            $link   = $_POST["youtube"];
        }
        
        if(isset($_POST["website"]) && $_POST["website"] == "vimeo") {

            
            $id = $this->normalize_link("vimeo", $link);
                if($id === false) {
                    echo 'Incorrect Vimeo link';
                }
                
            $xmlstr = file_get_contents("http://www.vimeo.com/moogaloop/load/clip:".$id);
            $xml = new SimpleXMLElement($xmlstr);
            $this->title = translit(sanitize_name($xml->video->caption));
            if($return)
                return $this->title;
            else {
                echo $this->title;
                exit;
            }
        
        }
        
        if(!$link) {
            $this->aError[] = "Video link not found";
        }
        
        
        $query = parse_url($link,PHP_URL_QUERY);
        parse_str($query);
        
        if(!isset($v) || empty($v)) {
            $this->aError[] = "Can not parse \$v: $v from \$link: $link in get_title() function";
            if($return) return false;
        }
        
        $url = "http://gdata.youtube.com/feeds/api/videos/". $v;
        $doc = new DOMDocument;
        $doc->load($url);
        $title = $doc->getElementsByTagName("title")->item(0)->nodeValue;
        
        $title = translit(sanitize_name($title));
        
        if($title == "youtube-videos") {
            $this->aError[] = "File title `youtube-videos` not allowed";
            if($return) return false;
        }
        
        //$sCmd = '/usr/local/bin/python2.5 /home/wap4/youtube-dl.py --get-title "'.$link.'"';
        //exec($sCmd, $aOutput, $nReturnCode);
        //file_put_contents("/home/wap4/public_html/files/x", "gettilecmd".$sCmd.PHP_EOL, FILE_APPEND);
        //file_put_contents("/home/wap4/public_html/files/x", "gettileresult".implode("::",$aOutput).PHP_EOL, FILE_APPEND);
        //if($nReturnCode == 0) {
            //if(isset($aOutput[1]))
            //    $title = $aOutput[1];
            //else
                //$title = current(explode(".",$aOutput[0]));
        //}
        
            
            
        if(!$return)
            echo $title;
        else
            return $title;
    }

    /**
     * Get Title from link and save to file
     * @param string $link
     * @return string $this->title
     */
    function get_direct_title($link, $uniqid) {
        if(!$link) {
            $this->aError[] = "Direct link not found";
        }
        
        /**
         * Get everything after last slash
         */
        $link = end(explode("/", $link));
        
        /**
         * If after slash there is dot somewhere, we get everything
         * before first dot symbol
         */
        $pos = stripos($link, ".");
        if($pos !== false) {
            $link = current(explode(".", $link));
        }
        
        $this->title = translit(sanitize_name($link));
        /**
         * Put Direct link title in $uniqid.title
         */
        file_put_contents($this->config->item("ffmpeg_key_dir")."".$uniqid.".title", $this->title);
        
        return $this->title;
    }
    /**
     * How much percents uploaded already for Youtube/Vimeo/other videos
     * @uses ajax
     */
    function upload_status($key, $title, $return = false)
    {

        $remote = $this->config->item("ffmpeg_key_dir")."".$key;
        if(is_file($remote.".vimeo")) {
            $status = $this->parse_wget_upload($key, true);
        } else {
            $size_remote = file_get_contents($remote.".length");
            
            if(is_file($this->config->item("ffmpeg_key_dir")."".$key.".extension"))
                $file_extension = file_get_contents($this->config->item("ffmpeg_key_dir")."".$key.".extension");
            else
                $file_extension = "flv";
            
            $size_local  = filesize($this->config->item("ffmpeg_before_dir")."".$title.".".$file_extension);
            $status      =  round(($size_local/$size_remote)*100);
        }
        
        if($status > 100) {
            $status = 100;
        }
        if(!$return)
            echo $status;
        else
            return $status;

    }
    
    /**
     * Allows changing max upload sizes for administrator level users
     */
    function change_settings() {
        $this->load->library('form_validation');
        /**
         * validate form input
         */
    	$this->form_validation->set_rules('unregistered', 'unregistered', 'numeric|min_length[1]|max_length[3]');
		$this->form_validation->set_rules('registered', 'registered', 'numeric|min_length[1]|max_length[3]');
        
        $this->data['unregistered']   = array('name'    => 'unregistered',
                                      'id'      => 'unregistered',
                                      'type'    => 'text',
                                      'value'   => $this->form_validation->set_value('unregistered'),
                                     );
        $this->data['registered']   = array('name'    => 'registered',
                                      'id'      => 'registered',
                                      'type'    => 'text',
                                      'value'   => $this->form_validation->set_value('registered'),
                                     );

        if ($this->form_validation->run() == true) {
        	
        	if ($this->site_model->update_sizes($this->input->post('unregistered'), $this->input->post('registered'))) {
                        /**
                         * if the change is successful
                         * redirect back to the home page
                         */
	        	$this->session->set_flashdata('message', $this->ion_auth->messages());
	        	redirect($this->config->item('base_url'), 'refresh');
	        } else {
                    /**
                     * if the setting change was un-successful
                     */
                    $this->session->set_flashdata('message', "bad values");
                    $this->data['message'] = "bad values";
                    $this->load->view('change_settings', $this->data);

	        }
        } else {
            /**
             * set the flash data error message if there is one
             */
            $this->data['message'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('message');
            
            $this->load->view('change_settings', $this->data);
            }
    }
    
    /**
     * Outputs progress of conversion for mobile devices
     * @param string $key - uniqid key
     */
    function mobile_status($key) {
        $data["key"]   = $this->uniqid = $key;
        $title = file_get_contents($this->config->item("ffmpeg_key_dir")."$key.title");
        
        $data["Upload_percents_complete"]  = $this->upload_status($key, $title, true);
        $data["Convert_percents_complete"] = $this->statuss($key, true);
        
        $data["fail_array"] = $this->read_file_report_into_array($key);
        
        if($data["Convert_percents_complete"] >= 98) {
            $extension = "mp3";
            $file = file($this->config->item("ffmpeg_key_dir")."$key.ffmpeg");
            foreach($file as $f) {
                if(substr($f, 0, 6) == "Output") {
                    $extension = substr(end(explode(".", $f)), 0, -3);
                    break;
                }
            }
            $data["download_url"] = $_SERVER["SERVER_NAME"].
            "/files/converted/".$title."-".$key.".".$extension;
        }
        $this->load->view("mobile_status", $data);
    }
    
    /**
     * Convert function which handles logic of converting videos
     * @global string $title - sanitized title of Youtube video
     */
    function convert() {
        
        /**
         * Youtube converter for mobile devices
         */
        if( isMobile() &&
            !isset($_REQUEST["from"]) &&
                $_SERVER["REMOTE_ADDR"] != $_SERVER["SERVER_ADDR"] &&
            (
                isset($_REQUEST["youtube"]) &&
                !empty($_REQUEST["youtube"])
            )
                ||
            (
                isset($_REQUEST["vimeo"]) && 
                !empty($_REQUEST["vimeo"])
            )
                
                ||
            (
                isset($_REQUEST["direct"]) && 
                !empty($_REQUEST["direct"])
            )
                
           ) {
            
            if($_SERVER["REMOTE_ADDR"] != $_SERVER["SERVER_ADDR"]) {
            file_put_contents(
                    $this->config->item("ffmpeg_key_dir")."".$_REQUEST["key"].".lala",
                    http_build_query($_REQUEST).$_SERVER["REMOTE_ADDR"]."\n", FILE_APPEND);
            
            
            if(!is_file($this->config->item("ffmpeg_key_dir")."".$_REQUEST["key"].".wget"))
            $this->ping_link("http://".$_SERVER["SERVER_NAME"]."/".$this->lang->lang()."/converter/convert/no_js", $_REQUEST["key"]);
            
            redirect('converter/mobile_status/'.$_REQUEST["key"], 'location');
            exit;
            }
        }
        
        if($this->uri->segment(4) == "no_js")
        {
            if(isset($_FILES['qqfile']['tmp_name']) && !empty($_FILES['qqfile']['tmp_name'])) {
                if(intval($this->data['max']*1024) > intval($_FILES['qqfile']['size']))
                {
                    
                    $file_body = current(explode(".",$_FILES['qqfile']['name']));
                    $file_body = translit(sanitize_name($file_body));
                    $file_end  = end(explode(".",$_FILES['qqfile']['name']));
                    
                    $ext = $this->config->item("ffmpeg_allowed");
                    
                    if(!in_array(strtolower($file_end), $ext)) {
                        log_message('error', 'security warning: upload file extension not allowed');
                        $this->write_fail_report("fail.extension $ext", $_POST["key"]);
                        die('security warning: security warning: upload file extension not allowed');
                    }
                    
                    if(!move_uploaded_file($_FILES['qqfile']['tmp_name'],
                    $this->config->item('ffmpeg_before_dir')."".$file_body.".".$file_end)) {
                        $this->aError[] = "move_uploaded_file error, when trying
                            to upload file in no_js";
                        $this->write_fail_report("fail.upload", $_POST["key"]);
                        die("fatal error, when trying to upload file");
                    }

                    $this->ffmpeg->setKey($_POST["key"]);
                    $this->ffmpeg->setQuality($_POST["quality"]);
                    $this->ffmpeg->setFormat(rawurldecode($_POST["format"]));
                    $this->ffmpeg->setInputFile($file_body.".".$file_end, "no_js");

                    if(isset($_REQUEST['cut']) && $_REQUEST['cut'] == 'yes') 
                    $this->ffmpeg->cut( $_REQUEST['s_hh'],
                                        $_REQUEST['s_mm'],
                                        $_REQUEST['s_ss'],
                                        $_REQUEST['e_hh'],
                                        $_REQUEST['e_mm'],
                                        $_REQUEST['e_ss']);

                    $veids="no_js";
                } else {
                    /**
                     * if file too big
                     */
                    $this->aError[] = "too big file {$_FILES['qqfile']['size']},
                    max filesize {$this->data['max']} MB";
                    $this->write_fail_report("fail.size ".$_FILES['qqfile']['size'], $_POST["key"]);
                    die("too big file, max filesize {$this->data['max']} MB");
                }
            }

            if(isset($_POST["youtube"]) && !empty($_POST["youtube"])) {
                $this->upload_youtube();
                global $title;
                
                $this->ffmpeg->setKey($_POST["key"]);
                $this->ffmpeg->setQuality($_POST["quality"]);
                $this->ffmpeg->setFormat(rawurldecode($_POST["format"]));
                $this->ffmpeg->setInputFile($title.".flv", "no_js");

                if(isset($_REQUEST['cut']) && $_REQUEST['cut'] == 'yes')
                $this->ffmpeg->cut( $_REQUEST['s_hh'],
                                    $_REQUEST['s_mm'],
                                    $_REQUEST['s_ss'],
                                    $_REQUEST['e_hh'],
                                    $_REQUEST['e_mm'],
                                    $_REQUEST['e_ss']);

                $veids="no_js";
            }
            
            if(isset($_POST["vimeo"]) && !empty($_POST["vimeo"])) {
                
                $this->aError[] = "Vimeo convert start ".$_POST["vimeo"];
                
                $id = $this->normalize_link("vimeo", $_POST["vimeo"]);
                if($id === false) {
                    echo 'Incorrect Vimeo link';
                    $this->write_fail_report("fail.vimeo ".$_POST['vimeo'], $_POST["key"]);
                }
                
                $bIsVimeoDOwnloaded = $this->get_vimeo_video($id);
                
                $this->ffmpeg->setKey($_REQUEST["key"]);
                $this->ffmpeg->setQuality($_POST["quality"]);
                $this->ffmpeg->setFormat(rawurldecode($_REQUEST["format"]));
                $this->ffmpeg->setInputFile($this->title.".flv", "no_js");

                if(isset($_REQUEST['cut']) && $_REQUEST['cut'] == 'yes')
                $this->ffmpeg->cut( $_REQUEST['s_hh'],
                                    $_REQUEST['s_mm'],
                                    $_REQUEST['s_ss'],
                                    $_REQUEST['e_hh'],
                                    $_REQUEST['e_mm'],
                                    $_REQUEST['e_ss']);

                $veids="no_js";
            }
            
            if(isset($_REQUEST["direct"]) && !empty($_REQUEST["direct"])) {
                
                $this->uniqid = $_POST["key"];
                
                $this->aError[] = "Direct convert start ".$_REQUEST["direct"];
                
                $better_url = $this->normalize_link("direct", $_REQUEST["direct"]);
                if($better_url === false) {
                    echo 'Incorrect direct link';
                    $this->write_fail_report("fail.direct ".$_REQUEST['direct'], $_POST["key"]);
                }
                
                $bIsDirectDownloaded = $this->direct_download($better_url, $_REQUEST["key"]);
                
                $this->ffmpeg->setKey($_REQUEST["key"]);
                $this->ffmpeg->setQuality($_POST["quality"]);
                $this->ffmpeg->setFormat(rawurldecode($_REQUEST["format"]));
                $this->ffmpeg->setInputFile($this->title.".".$this->extension, "no_js");

                if(isset($_REQUEST['cut']) && $_REQUEST['cut'] == 'yes')
                $this->ffmpeg->cut( $_REQUEST['s_hh'],
                                    $_REQUEST['s_mm'],
                                    $_REQUEST['s_ss'],
                                    $_REQUEST['e_hh'],
                                    $_REQUEST['e_mm'],
                                    $_REQUEST['e_ss']);

                $veids="no_js";
            }
            
        } else {

        $this->ffmpeg->setKey($this->uri->segment(4));
        $this->ffmpeg->setQuality($this->uri->segment(15));
        $this->ffmpeg->setFormat($this->uri->segment(5));
        $this->ffmpeg->setInputFile($this->uri->segment(6));

	if($this->uri->segment(7) == 'yes') 
        $this->ffmpeg->cut( $this->uri->segment(8),
                            $this->uri->segment(9),
                            $this->uri->segment(10),
                            $this->uri->segment(11),
                            $this->uri->segment(12),
                            $this->uri->segment(13));
        
        $veids="js";
        
        }
        
        $this->ffmpeg->startConvert($veids);
        
        //add info in DB
        $this->_save_to_db();
        
        echo current(explode(".", strtolower($this->uri->segment(6))));
    }
    
    /**
     * Returns percents complete of conversion
     * @param string $unikaalais - uniqid string
     * @param boolean $return - true- returns result, false- outputs result
     * @return type 
     */
    function statuss($unikaalais, $return = false) {
        
        $this->ffmpeg->setKey($unikaalais);
        
        $converter_completed_percents = $this->ffmpeg->getPercentsComplete();
        
        if($converter_completed_percents > 100) {
            $converter_completed_percents = 100;
        }
        
        if(!$return) {
            header("Cache-Control: no-cache, must-revalidate"); // HTTP/1.1
            header("Expires: Sat, 26 Jul 1997 05:00:00 GMT");
            echo $converter_completed_percents;
        } else
            return $converter_completed_percents;
    }

    /**
     * removes everything after last dot symbol if dot is in string
     * and outputs result
     */
    function change_body() {
	//$gabals = substr($this->uri->segment(4), 0, -4);
        
        $pos2 = stripos($this->uri->segment(4), ".");
        if ($pos2 !== false) {
            echo current(explode(".", strtolower($this->uri->segment(4))));
        } else {
            echo strtolower($this->uri->segment(4));
        }

    }
    
    /**
     * Downloads and saves external file
     * @param string $link address of file
     * @param string $location location where to save
     * @return boolean true if success, false if failure
     */
    function download_link($link, $location, $type = "youtube") {

        switch($type) {
            
            case "vimeo":
               
                $save_vimeo = "/usr/src/vimeo.sh $link ".$this->config->item("ffmpeg_before_dir")."$location ".$this->uniqid;
                $this->aError[] = "Start Vimeo convert with command: $save_vimeo";
                $proc = popen($save_vimeo, "r");
                pclose($proc);
                
            break;
        
            case "direct_download":
                $ext      = $this->config->item("ffmpeg_allowed");
                $file_end = end(explode(".", $link));
                if(!in_array(strtolower($file_end), $ext)) {
                    $this->aError[] = "Direct upload file extension not allowed";
                    log_message('error', 'security warning: upload file extension not allowed');
                    return false;
                }
                $this->extension = $file_end;
                file_put_contents($this->config->item("ffmpeg_key_dir")."".$this->uniqid.".extension", $this->extension);
                $location = $location.".".$file_end;
                
            /**
             * Don't break and continue default case execution
             */
        
            default:
            $loc  = $this->config->item("ffmpeg_before_dir")."".$location;
            $file = fopen($loc, 'w');
            if($file === false) {
                $this->aError[] = "Can not open file: $location for writing";
                return false;
            }
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_FILE, $file);
            curl_setopt($ch, CURLOPT_HEADER, 0);
            curl_setopt($ch, CURLOPT_URL, $link);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
            @curl_setopt($ch, CURLOPT_COOKIEFILE, COOKIE);
            @curl_setopt($ch, CURLOPT_COOKIEJAR, COOKIE);
            if(!curl_exec($ch)) {
                $this->aError[] = "Failed to download file: $link";
                return false;
            }
            curl_close($ch);
            fclose($file);
            break;
        }

        return true;
    }
    
    /**
     * To run web pages in background with long loading time
     * @param string $link
     */
    function ping_link($link, $key) {
            
            $_GETPOST = array_merge($_GET, $_POST); 
            $encoded  = http_build_query($_GETPOST);
            $command = "wget --post-data '$encoded&from=wget&uniq_id=$key' $link -b -O /dev/null -o ".$this->config->item("ffmpeg_key_dir")."".$key.".wget >/dev/null 2>&1";
            
            $this->aError[] = $command;
            exec($command, $arrr);

    }
    
    function ajax_upload() {
        
        switch($_POST["website"]) {
            
            case "vimeo":
            $this->aError[] = "Vimeo ajax upload start ".$_POST["youtube"];

            $id = $this->normalize_link("vimeo", $_POST["youtube"]);
            if($id === false) {
                echo 'Incorrect Vimeo link';
            }

            $bIsVimeoDOwnloaded = $this->get_vimeo_video($id);
            break;
            
            default: //youtube
                
                $this->upload_youtube();
                
            break;
        }
    }
    
    /**
     * Get direct link to .flv file of Vimeo video and downlod it
     * @param string $link
     * @return boolean on failure, string on success 
     */
    function get_vimeo_video($id) {
        $this->uniqid = isset($_POST["key"]) ? $_POST["key"] : $this->uri->segment(4);
        
        if(empty($this->uniqid)) {
            $this->aError[] = "Vimeo uniqid is empty";
            return false;
        }


        $xmlstr = file_get_contents("http://www.vimeo.com/moogaloop/load/clip:".$id);
        $xml = new SimpleXMLElement($xmlstr);
        $this->title = translit(sanitize_name($xml->video->caption));

        /**
         * Put video title in $uniqid.title
         */
        file_put_contents($this->config->item("ffmpeg_key_dir")."".$this->uniqid.".title", $this->title);
        
        /**
         * Put content length in $this->uniqid.length
         */
        file_put_contents($this->config->item("ffmpeg_key_dir")."".$this->uniqid.".length", 0);
        
        $bIsVimeoDownloaded = $this->download_link($id, $this->title, "vimeo");
        if($bIsVimeoDownloaded === false) {
                return false;
        }

    }
    
    /**
     * Get direct link to .flv file of Youtube video
     * @param string  $link
     * @return string on success, boolean false on failure
     */
    function get_youtube_video($link) {
        
        if(substr($link, 0, 7) != "http://")
        $link = "http://".$link;
                
        $query = parse_url($link,PHP_URL_QUERY);
        
        parse_str($query);
        
        if(!isset($v) || empty($v)) {
            $this->aError[] = "Can not parse \$v: $v from \$link: $link in upload_youtube() function";
            return false;
        }
        
        $link = "http://www.youtube.com/watch?v=".$v;
        
        $file_contents = file_get_contents(trim($link));
        //file_put_contents("/home/wap4/public_html/files/youtube_contents.html", $file_contents);
        if ($file_contents !== false)
        {

            $vidUrl = '';
            if (preg_match("/fmt_url_map/i",$file_contents))
            {
                if (preg_match("/&amp;fmt_url_map/i",$file_contents))
                $vidUrl = end(explode('&amp;fmt_url_map=',$file_contents));
                
                if (preg_match("/&fmt_url_map/i",$file_contents))
                $vidUrl = end(explode('&fmt_url_map=',$file_contents));
                
                $vidUrl = current(explode('&',$vidUrl));
                $vidUrl = current(explode('%2C',$vidUrl));
                $vidUrl = urldecode(end(explode('%7C',$vidUrl)));
            } else {
                $this->aError[] = "Can not get fmt_url_map";
                return false;
            }
            
            if(empty($vidUrl)) {
                $this->aError[] = "empty vidUrl";
                return false;
            } else
                return  $vidUrl;
            
        } else {
            $this->aError[] = "Can not get contents from `$link`";
            return false;
        }

    }
    
    /**
     * Reads headers of web page to get content size
     * @param string $link
     * @return integer on success, boolean false on failure 
     */
    function get_content_length($link, $type) {
        
        switch($type) {
            
            case "vimeo":
                
                $loc = $this->config->item("ffmpeg_key_dir")."".$this->uniqid.".vimeo";
                
                $file = file($loc);
                if($file === false) {
                    $this->aError[] = "Can not read $loc key";
                }
                //Content-Length: 35707 for head, bet neder...
                $length = 0;
                foreach($file as $f) {
                    $pos = strpos($f, "Length:");
                    if($pos !== false) {
                        $aParts = explode(" ", $f);
                        $length = $aParts[1];
                        break;
                    }
                }
                
                return $length;
                
            break;

            default:
            $ch = curl_init($link);
            curl_setopt($ch, CURLOPT_NOBODY, true);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HEADER, true);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
            $data = curl_exec($ch);
            curl_close($ch);

            if (preg_match('/Content-Length: (\d+)/', $data, $matches)) {
              return (int)$matches[1];
            } else {
                $this->aError[] = "Unknown content length for url: $link";
                return false;
            }
            break;
        }


    }
    
    /**
     * Parses url and makes standard url which can  be sent later to extract
     * location of video file
     * @param string $type - vimeo, youtube etc.
     * @param string $link - URL
     * @return string on success, boolean false on failure 
     */
    function normalize_link($type, $link) {
        
        switch($type) {
            
        case "vimeo":

        if(is_numeric($link)) {
            return $link;
        } else {
            
            if(substr($link, 0, 7) != "http://")
            $link = "http://".$link;
            
            $pos = stripos($link, "/");
            if($pos !== false) {
                
                $aParts = explode("/", $link);
                $id = end($aParts);
                
                if(!is_numeric($id)) {
                    $this->aError[] = "Failed to parse Vimeo link";
                    return false;
                } else {
                    return $id;
                }
            }
        }
        break;
        
        case "direct":
            
            if(substr($link, 0, 7) != "http://")
                    $link = "http://".$link;
            
        break;
    
        default: //youtube

            if(substr($link, 0, 7) != "http://")
                    $link = "http://".$link;

            $query = parse_url($link,PHP_URL_QUERY);

            parse_str($query);

            if(!isset($v) || empty($v)) {
                $this->aError[] = "Can not parse \$v: $v from \$link: $link in upload_youtube() function";
                return false;
            }

            $link = "http://www.youtube.com/watch?v=".$v;
        
        break;
        
        }
        
        return $link;
        
    }
    
    /**
     * Returns percents already downloaded with wget
     * @param string $uniqid
     * @param boolean $return
     * @return integer 
     */
    function parse_wget_upload($uniqid, $return = false) {
        
        $file_path = $this->config->item("ffmpeg_key_dir").$uniqid.".vimeo";
        
        if(!is_file($file_path)) {
            $this->aError[] = "File $uniqid.vimeo not found";
        }
        
        $aLines = file($file_path);
        
        $sPrev_line = "%";
        $bStartSearch = false;
        $nPrecents = 0;
        foreach($aLines as $l):
            /**
             * Set parse flag on when we get 1st empty line and 
             * jump to next line
             */
            $trimmed_line = trim($l);
            if(empty($trimmed_line) && $bStartSearch === false) {
                $bStartSearch = true;
                continue;
            }
            
            /**
             * If we get line without percent symbol, it means previous line
             * was last download progress line and we need parse $sPrev_line
             */
            $pos = stripos($l, "%");
            
            if($bStartSearch && $pos === false) {

                $aLineParts = explode(" ", $sPrev_line);
                foreach($aLineParts as $sPart):
                    
                    $pos = stripos($sPart, "%");
                    if($pos !== false) {
                        /**
                         * Chop off percent symbol
                         */
                        $nPrecents = substr($sPart, 0, -1);
                        break 2;
                    }
                endforeach;
            }
            
            /**
             * If line had percent symbol, we update $sPrev_line string
             */
            $pos = stripos($l, "%");
            if($pos !== false) {
                $sPrev_line = $l;
                continue;
            }
            
        endforeach;
        
        if($return)
            return $nPrecents;
        else
            echo $nPrecents;
        
    }
    
    function direct_download($link = false, $key = false){
        $this->uniqid = $key;
        $nFileLength = $this->get_content_length($link, "direct");
        
        if($nFileLength === false || $nFileLength == 0) {
            $this->aError[] = "Filesize for $link is empty";
            $nFileLength = 0;
            return false;
        }
        
        $this->title = $this->get_direct_title($link, $this->uniqid);
        
        file_put_contents($this->config->item("ffmpeg_key_dir")."".$this->uniqid.".length", $nFileLength);
        
        $bIs_Downloaded = $this->download_link($link, $this->title, "direct_download");
        
        if($bIs_Downloaded === false) {
            $this->aError[] = "Download failed for link: $link";
            return false;
        } else 
            return true;
        
    }
    
    /**
     * Create or append .fail file
     * file structure:
     *  language_constant(required) [space] some_data(not required)
     * @param string $text
     * @param string $uniqid 
     */
    function write_fail_report($text, $uniqid) {
        
        file_put_contents(
                $this->config->item("ffmpeg_key_dir")."".$uniqid.".fail",
                $text."\n", FILE_APPEND);
        
    }
    
    /**
     * Get array of fails
     * @param string $uniqid
     * @return array 
     */
    function read_file_report_into_array($uniqid) {
        
        $aFailArray = array();
        
        $file = file($this->config->item("ffmpeg_key_dir")."".$uniqid.".fail");
        if(count($file) > 0) {
            foreach($file as $f) {
                
                $pos = stripos($f, " ");
                if($pos !== false) {
                    
                    $parts = explode(" ", $f);
                    $aFailArray[] = lang($parts[0]).": ".$parts[1];
                    
                } else {
                    
                    $aFailArray[] = lang($f);
                    
                }

            }
        }
        return $aFailArray;
    }

    function _save_to_db() {
            $this->load->model('ffmpeg_model');

            if($this->uri->segment(4) != "no_js")
                $apraksts  = $this->uri->segment(14);
            else
                $apraksts  = $_POST["apraksts"];
        
            if(isset($this->uniqid) && !empty($this->uniqid))
                $key   = $this->uniqid;
            else
                $key   = $this->ffmpeg->key;

            $title = file_get_contents($this->config->item("ffmpeg_key_dir")."$key.title");

            $extension = "mp3";
            $file = file($this->config->item("ffmpeg_key_dir")."$key.ffmpeg");
            foreach($file as $f) {
                if(substr($f, 0, 6) == "Output") {
                    $extension = substr(end(explode(".", $f)), 0, -3);
                    break;
                }
            }
            
            if ($this->ion_auth->logged_in()) {
                $user = $this->ion_auth->get_user();
                $user = $user->id;
            } else {
                $user = 0;
            }

            $this->ffmpeg_model->add_video_to_db($user,  $title."-".$key.".".$extension, $apraksts);
    }

}
